name: lobe-chat-pro-database
services:
  # 后台管理
  annyun-lobe-admin:
    container_name: annyun-lobe-admin
    image: registry.cn-hangzhou.aliyuncs.com/ann-chat/annyun-lobe-admin:latest
    restart: always
    ports:
      - 8888:80 # 管理端端口，默认8888，如果被占用了，则改成其他的，比如8889:80
      - 9999:9999
    env_file:
      - .env
    volumes:
      - /data/annyun-lobe/:/data/annyun-lobe/
  # redis，如果你需要连已经部署了redis，这一块可以去掉，然后修改annyun-admin底下对应redis的环境变量
  annyun-redis:
    container_name: annyun-redis
    hostname: annyun-redis
    image: docker.m.daocloud.io/redis:7.2.4
    restart: always
    ports:
      - 6379:6379 # 映射端口，如果6379被占用了，则可以改成其它的，比如6380:6379，只能改前面的前面那个，后面的6379是容器内部的，不能改
    volumes:
      - /data/annyun-lobe/redis/data:/data
      - /data/annyun-lobe/redis/logs:/logs
      - /data/annyun-lobe/redis/redis.conf:/usr/local/etc/redis/redis.conf

  postgresql:
    image: pgvector/pgvector:pg17
    container_name: lobe-postgres
    ports:
      - '5432:5432'
    volumes:
      - '/data/annyun-lobe/postgresql/data:/var/lib/postgresql/data'
    env_file:
      - .env
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  # oss存储，如果不用自建minio，则这一块可以去掉。
  minio:
    image: minio/minio
    container_name: lobe-minio
    ports:
      - '${MINIO_PORT}:${MINIO_PORT}'
      - '9001:9001'
    volumes:
      - '/data/annyun-lobe/s3_data:/etc/minio/data'
    env_file:
      - .env
    restart: always
    entrypoint: >
      /bin/sh -c "
        minio server /etc/minio/data --address ':${MINIO_PORT}' --console-address ':9001' &
        MINIO_PID=\$!
        while ! curl -s http://localhost:${MINIO_PORT}/minio/health/live; do
          echo 'Waiting for MinIO to start...'
          sleep 1
        done
        sleep 5
        mc alias set myminio http://localhost:${MINIO_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}
        echo 'Creating bucket ${S3_BUCKET}'
        mc mb myminio/${S3_BUCKET}
        wait \$MINIO_PID
      "

  searxng:
    image: searxng/searxng
    container_name: lobe-searxng
    volumes:
      - './searxng-settings.yml:/etc/searxng/settings.yml'
    environment:
      - 'SEARXNG_SETTINGS_FILE=/etc/searxng/settings.yml'
    restart: always
    env_file:
      - .env

  # lobe-chat-pro
  lobe:
    image: registry.cn-hangzhou.aliyuncs.com/ann-chat/lobe-chat-pro-database:latest
    container_name: lobe-chat-pro-database
    ports:
      - '3210:3210'
    depends_on:
      - postgresql
    env_file:
      - .env
    restart: always

volumes:
  data:
    driver: local
  s3_data:
    driver: local
